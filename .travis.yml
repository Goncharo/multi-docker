sudo: required

# specify generic language since we're using docker
language: generic

services:
  - docker

# build development version of client for testing
# note we can add tests for other images as well
before_install:
  - docker build -t dgoncharov/react-test -f ./client/Dockerfile.dev ./client

# test running section
script:
  - docker run dgoncharov/react-test npm test -- --coverage

# build production images
after_success:
  - docker build -t dgoncharov/multi-client ./client
  - docker build -t dgoncharov/multi-nginx ./nginx
  - docker build -t dgoncharov/multi-server ./server
  - docker build -t dgoncharov/multi-worker ./worker
  # login to docker CLI, using encrypted env vars from travis
  # pipe password into docker login, using stdin
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin
  # push images to docker hub
  - docker push dgoncharov/multi-client
  - docker push dgoncharov/multi-nginx
  - docker push dgoncharov/multi-server
  - docker push dgoncharov/multi-worker

deploy:
  # use AWS elastic beanstalk to deploy app
  provider: elasticbeanstalk
  # the region AWS app was created in, from AWS URL
  region: "us-east-2"
  # name of the AWS app
  app: "multi-docker"
  # environment name (top of AWS dashboard)
  env: "MultiDocker-env"
  # zips up source code, and uploads to S3,
  # then tells AWS EB to use this code to deploy app
  # (search for S3 buckets in AWS with elasticbeanstalk name)
  bucket_name: "elasticbeanstalk-us-east-2-758672168977"
  # the folder which the zip will get placed (app name)
  bucket_path: "docker-multi"
    # deploy anytime we push code to the master branch
  on:
    branch: master
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key:
    secure: "$AWS_SECRET_KEY"
